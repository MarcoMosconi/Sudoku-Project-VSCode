import base64
import io
import json
import logging
import boto3
from PIL import Image
from botocore.config import Config
import os
import random
from botocore.exceptions import ClientError

class ImageError(Exception):
    "Custom exception for errors returned by Amazon Nova Canvas"

    def __init__(self, message):
        self.message = message


logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

def generate_image(model_id, body):
    """
    Generate an image using Amazon Nova Canvas model on demand.
    Args:
        model_id (str): The model ID to use.
        body (str) : The request body to use.
    Returns:
        image_bytes (bytes): The image generated by the model.
    """

    logger.info(
        "Generating image with Amazon Nova Canvas model %s", model_id)

    bedrock = boto3.client(
        service_name='bedrock-runtime',
        config=Config(read_timeout=300)
    )

    accept = "application/json"
    content_type = "application/json"

    response = bedrock.invoke_model(
        body=body, modelId=model_id, accept=accept, contentType=content_type
    )
    response_body = json.loads(response.get("body").read())

    base64_image = response_body.get("images")[0]
    base64_bytes = base64_image.encode('ascii')
    image_bytes = base64.b64decode(base64_bytes)

    finish_reason = response_body.get("error")

    if finish_reason is not None:
        raise ImageError(f"Image generation error. Error is {finish_reason}")

    logger.info(
        "Successfully generated image with Amazon Nova Canvas model %s", model_id)

    return image_bytes

def main():
    """
    Entrypoint for Amazon Nova Canvas example.
    """
    try:
        logging.basicConfig(level=logging.INFO,
                            format="%(levelname)s: %(message)s")

        model_id = 'amazon.nova-canvas-v1:0'
        input_folder = "content/conditioning_images"
        output_folder = "content/generated_images"
        processed_images_file = "processed_images.txt"
        os.makedirs(output_folder, exist_ok=True)

        # # Generate 10 random seeds to be used for all images
        # random.seed(12)  # Set a fixed seed for reproducibility
        # seeds = [random.randint(0, 858993459) for _ in range(10)]
        # logger.info(f"Using seeds: {seeds}")

        # Load already processed images
        if os.path.exists(processed_images_file):
            with open(processed_images_file, "r") as f:
                processed_images = set(f.read().splitlines())
        else:
            processed_images = set()

        for image_filename in os.listdir(input_folder):
            if image_filename in processed_images:
                logger.info(f"Skipping already processed image: {image_filename}")
                continue
            
            input_image_path = os.path.join(input_folder, image_filename)
            if not os.path.isfile(input_image_path):
                continue

            # Create a subfolder for the current conditioning image
            conditioning_image_folder = os.path.join(output_folder, os.path.splitext(image_filename)[0])
            os.makedirs(conditioning_image_folder, exist_ok=True)

            with open(input_image_path, "rb") as image_file:
                input_image = base64.b64encode(image_file.read()).decode('utf8')

            for i in range(10):
                seed = random.randint(0, 858993459)
                logger.info(f"Using seed: {seed}")
                body = json.dumps({
                    "taskType": "TEXT_IMAGE",
                    "textToImageParams": {
                        "text": "Add some numbers between 1 and 9. Include realistic lighting and background objects like a pen. Change perspective",
                        "negativeText": "blurry, digital screen, computer-generated, torn paper, low resolution, numbers lower than 1, numbers greater than 9",
                        "conditionImage": input_image,
                        "controlMode": "CANNY_EDGE",
                        "controlStrength": 0.6
                    },
                    "imageGenerationConfig": {
                        "numberOfImages": 1,
                        "height": 512,
                        "width": 512,
                        "cfgScale": 10,
                        "seed": seed
                    }
                })

                image_bytes = generate_image(model_id=model_id, body=body)
                image = Image.open(io.BytesIO(image_bytes))
                output_path = os.path.join(conditioning_image_folder, f"{os.path.splitext(image_filename)[0]}_seed_{seed}.png")
                image.save(output_path)
                logger.info(f"Image saved to {output_path}")

            # Mark image as processed
            processed_images.add(image_filename)
            with open(processed_images_file, "a") as f:
                f.write(image_filename + "\n")

    except ClientError as err:
        message = err.response["Error"]["Message"]
        logger.error("A client error occurred: %s", message)
        print("A client error occured: " +
              format(message))
    except ImageError as err:
        logger.error(err.message)
        print(err.message)

    else:
        print(
            f"Finished generating images with Amazon Nova Canvas model {model_id}.")
        

if __name__ == "__main__":
    main()